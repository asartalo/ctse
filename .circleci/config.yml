# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:12.13-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - setup_remote_docker
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: npm install

      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - run:
          name: Pull Docker Images
          command: |
            docker-compose -f ./docker-compose-selenium.yml pull

      # install selenium
      - run:
          name: Selenium Standalone Installation
          command: npm run install-selenium

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # run tests
      - run:
          name: Run Tests
          command: npm run test-no-docker
          # Uncomment the following if we can do e2e tests properly
          # command: npm run test
          environment:
            CTSE_E2E_TIMEOUT: 60000
            CTSE_E2E_VERBOSE: 'yes'

      # Run coverage report for Code Climate
      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build
      - run:
          name: Send coverage report to Code Climate
          command:
            # nyc report requires that nyc has already been run,
            # which creates the .nyc_output folder containing necessary data
            ./cc-test-reporter after-build -t lcov
      - run:
          name: Send coverage report to Coveralls
          command:
            # send coverage report to coveralls
            npm run coveralls-report

      # Upload results
      - store_artifacts: # upload test coverage as artifact
          path: ./coverage/lcov.info
          prefix: tests
